
สร้าง app
Run Command Line
1.เลือก Drive ที่จะ Create app
cd D: 
2. Create folder name
mkdir auth-system
cd auth-system
3.Create package.jason
npm init -y
ติดตั้ง 
npm install express body-parser express-session bcryptjs ejs Router dotenv config

npm install config   //กรณีมีหลายโปรเจค




การสร้างระบบลาพักร้อน (Leave Management System) 
    เป็นระบบที่ช่วยให้พนักงานสามารถขอลาพักร้อนและผู้ดูแลสามารถอนุมัติหรือปฏิเสธคำขอได้ โดยระบบนี้ควรประกอบไปด้วยฟังก์ชันการทำงานดังนี้:

คุณสมบัติพื้นฐานของระบบลาพักร้อน:
1.การลงทะเบียนผู้ใช้งาน (User Registration)
    พนักงานสามารถลงทะเบียนเป็นผู้ใช้งานในระบบ
    ระบบต้องสามารถกำหนดประเภทของผู้ใช้ (เช่น พนักงาน, ผู้จัดการ, ผู้ดูแลระบบ)
2.การยื่นคำขอลาพักร้อน (Submit Leave Request)
    พนักงานสามารถส่งคำขอลาพักร้อน โดยระบุรายละเอียดต่าง ๆ เช่น วันที่เริ่มลาพักร้อน, วันที่สิ้นสุด, และเหตุผลการลา
    ระบบต้องคำนวณจำนวนวันลาพักร้อนที่เหลืออยู่ของพนักงาน
3.การอนุมัติหรือปฏิเสธคำขอ (Approve/Reject Leave Request)
    ผู้จัดการหรือผู้ดูแลระบบสามารถพิจารณาและตัดสินใจว่าจะอนุมัติหรือปฏิเสธคำขอลา
    ระบบจะแจ้งเตือนพนักงานเกี่ยวกับผลการพิจารณาคำขอ
4.ประวัติการลาพักร้อน (Leave History)
    ผู้ใช้งานสามารถตรวจสอบประวัติการลาพักร้อนของตนเอง
    ผู้จัดการสามารถดูประวัติการลาของพนักงานในทีม
5.คำนวณวันลาคงเหลือ (Remaining Leave Calculation)
    ระบบต้องคำนวณจำนวนวันลาพักร้อนที่เหลือให้แต่ละพนักงาน โดยอาจกำหนดจำนวนวันลาขั้นสูงต่อปี

ตารางผู้ใช้งาน (Users Table):
id (Primary Key)
username (Unique)
password (Hashed)
first_name
last_name
role (เช่น 'employee', 'manager', 'admin')
total_leave_days (จำนวนวันลาทั้งหมด)
remaining_leave_days (จำนวนวันลาที่เหลือ)

ตารางคำขอลาพักร้อน (Leave Requests Table):
id (Primary Key)
user_id (Foreign Key to Users Table)
start_date
end_date
reason
status (Pending, Approved, Rejected)
requested_days (จำนวนวันลาที่ขอ)


-หน้าอนุมัติ ต้องดึงข้อมูล คำขอลาทั้งหมดมา แล้วบันทึกลงใน TABLE `approvalhistory` 
โดยมี column 
    `approvalid` int(11) NOT NULL AUTO_INCREMENT,
    `leaverequestid` int(11) DEFAULT NULL,
    `approval_status` enum('Approved', 'Rejected') NOT NULL,
    `approvedby` varchar(50) DEFAULT NULL,
    `approvaldate` date DEFAULT NULL,
    `comments` text DEFAULT NULL,
  

พร้อมทั้ง บันทึกชื่อตำแหน่งโดยเก็บจาก ตารางคำขอลาพักร้อน approveby 

Deploy ผ่านแพลตฟอร์มต่าง ๆ:

*GitHub Actions: ใช้ GitHub Actions เพื่อสร้าง pipeline สำหรับการ deploy และรัน Node.js application บน server หรือ cloud service
Heroku: รองรับการ deploy Node.js application โดยตรงจาก Git repository ผ่านการเชื่อมต่อกับ GitHub หรือการ push โค้ดโดยตรงไปยัง Heroku
Vercel: เหมาะสำหรับการ deploy full-stack application โดยใช้ Node.js สำหรับฟังก์ชัน backend
Render: อีกหนึ่งแพลตฟอร์มที่ช่วยให้คุณ deploy Node.js application จาก Git repository ได้ง่ายๆ


*Deploy บนเซิร์ฟเวอร์:
หลังจาก push โค้ด Node.js ไปยัง Git repository แล้ว คุณสามารถ clone repository นั้นลงบนเซิร์ฟเวอร์ที่คุณต้องการรันแอปพลิเคชัน และใช้คำสั่ง npm install และ npm start เพื่อรันแอปพลิเคชัน


*ใช้ CI/CD Pipeline:
คุณสามารถตั้งค่า continuous integration/continuous deployment (CI/CD) pipeline เช่น GitLab CI/CD หรือ GitHub Actions เพื่อ build และ deploy แอปพลิเคชัน Node.js อัตโนมัติเมื่อมีการ push โค้ดใหม่

การใช้งาน PM2 Run 
pm2 start app.js	รันแอป
pm2 list	ดูรายการแอปที่รันอยู่
pm2 stop my-app	หยุดแอป
pm2 restart my-app	รีสตาร์ทแอป
pm2 delete my-app	ลบแอปออกจาก PM2
pm2 logs	ดู log ของแอป
pm2 save	บันทึก process ที่รันอยู่
pm2 startup	ตั้งค่าให้ PM2 รันตอนเปิดเครื่


test ระบบ
user admin
User = admin@gmail.com
password = 1234

User ทั่วไป
User = yongyuttgsaving@gmail.com
Password = 1234